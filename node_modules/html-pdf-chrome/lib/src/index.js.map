{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nimport { launch, LaunchedChrome } from 'chrome-launcher';\nimport * as CDP from 'chrome-remote-interface';\n\nimport * as CompletionTrigger from './CompletionTriggers';\nimport { CreateOptions } from './CreateOptions';\nimport { CreateResult } from './CreateResult';\n\nconst DEFAULT_CHROME_FLAGS = [\n  '--disable-gpu',\n  '--headless',\n  '--hide-scrollbars',\n];\n\nexport { CompletionTrigger, CreateOptions, CreateResult };\n\n/**\n * Generates a PDF from the given HTML string, launching Chrome as necessary.\n *\n * @export\n * @param {string} html the HTML string.\n * @param {Options} [options] the generation options.\n * @returns {Promise<CreateResult>} the generated PDF data.\n */\nexport async function create(html: string, options?: CreateOptions): Promise<CreateResult> {\n  const myOptions = Object.assign({}, options);\n  let chrome: LaunchedChrome;\n\n  myOptions._canceled = false;\n  if (myOptions.timeout != null && myOptions.timeout >= 0) {\n    setTimeout(() => {\n      myOptions._canceled = true;\n    }, myOptions.timeout);\n  }\n\n  await throwIfCanceledOrFailed(myOptions);\n  if (!myOptions.host && !myOptions.port) {\n    chrome = await launchChrome(myOptions);\n  }\n\n  try {\n    const tab = await CDP.New(myOptions);\n    try {\n      return await generate(html, myOptions, tab);\n    } finally {\n      await CDP.Close({ ...myOptions, id: tab.id });\n    }\n  } finally {\n    if (chrome) {\n      await chrome.kill();\n    }\n  }\n}\n\n/**\n * Connects to Chrome and generates a PDF from HTML or a URL.\n *\n * @param {string} html the HTML string or URL.\n * @param {CreateOptions} options the generation options.\n * @param {any} tab the tab to use.\n * @returns {Promise<CreateResult>} the generated PDF data.\n */\nasync function generate(html: string, options: CreateOptions, tab: any): Promise<CreateResult>  {\n  await throwIfCanceledOrFailed(options);\n  const client = await CDP({ ...options, target: tab });\n  try {\n    await beforeNavigate(options, client);\n    const {Page} = client;\n    if (/^(https?|file|data):/i.test(html)) {\n      await Promise.all([\n        Page.navigate({url: html}),\n        Page.loadEventFired(),\n      ]); // Resolve order varies\n    } else {\n      const {frameTree} = await Page.getResourceTree();\n      await Promise.all([\n        Page.setDocumentContent({html, frameId: frameTree.frame.id}),\n        Page.loadEventFired(),\n      ]); // Resolve order varies\n    }\n    await afterNavigate(options, client);\n    // https://chromedevtools.github.io/debugger-protocol-viewer/tot/Page/#method-printToPDF\n    const pdf = await Page.printToPDF(options.printOptions);\n    await throwIfCanceledOrFailed(options);\n    return new CreateResult(pdf.data);\n  } finally {\n    client.close();\n  }\n}\n\n/**\n * Code to execute before the page navigation.\n *\n * @param {CreateOptions} options the generation options.\n * @param {*} client the Chrome client.\n * @returns {Promise<void>} resolves if there we no errors or cancellations.\n */\nasync function beforeNavigate(options: CreateOptions, client: any): Promise<void> {\n  const {Network, Page, Runtime} = client;\n  await throwIfCanceledOrFailed(options);\n  if (options.clearCache) {\n    await Network.clearBrowserCache();\n  }\n  // Enable events to be used here, in generate(), or in afterNavigate().\n  await Promise.all([\n    Network.enable(),\n    Page.enable(),\n    Runtime.enable(),\n  ]);\n  if (options.runtimeConsoleHandler) {\n    Runtime.consoleAPICalled(options.runtimeConsoleHandler);\n  }\n  if (options.runtimeExceptionHandler) {\n    Runtime.exceptionThrown(options.runtimeExceptionHandler);\n  }\n  Network.requestWillBeSent((e) => {\n    options._mainRequestId = options._mainRequestId || e.requestId;\n  });\n  Network.loadingFailed((e) => {\n    if (e.requestId === options._mainRequestId) {\n      options._navigateFailed = true;\n    }\n  });\n  if (options.extraHTTPHeaders) {\n    Network.setExtraHTTPHeaders({headers: options.extraHTTPHeaders});\n  }\n  if (options.cookies) {\n    await throwIfCanceledOrFailed(options);\n    await Network.setCookies({cookies: options.cookies});\n  }\n  await throwIfCanceledOrFailed(options);\n}\n\n/**\n * Code to execute after the page navigation.\n *\n * @param {CreateOptions} options the generation options.\n * @param {*} client the Chrome client.\n * @returns {Promise<void>} resolves if there we no errors or cancellations.\n */\nasync function afterNavigate(options: CreateOptions, client: any): Promise<void> {\n  if (options.completionTrigger) {\n    await throwIfCanceledOrFailed(options);\n    const waitResult = await options.completionTrigger.wait(client);\n    if (waitResult && waitResult.exceptionDetails) {\n      await throwIfCanceledOrFailed(options);\n      throw new Error(waitResult.result.value);\n    }\n  }\n  await throwIfCanceledOrFailed(options);\n}\n\n/**\n * Throws an exception if the operation has been canceled or the main page\n * navigation failed.\n *\n * @param {CreateOptions} options the options which track cancellation and failure.\n * @returns {Promise<void>} rejects if canceled or failed, resolves if not.\n */\nasync function throwIfCanceledOrFailed(options: CreateOptions): Promise<void> {\n  if (options._canceled) {\n    throw new Error('HtmlPdf.create() timed out.');\n  }\n  if (options._navigateFailed) {\n    throw new Error('HtmlPdf.create() page navigate failed.');\n  }\n}\n\n/**\n * Launches Chrome with the specified options.\n *\n * @param {CreateOptions} options the options for Chrome.\n * @returns {Promise<LaunchedChrome>} The launched Chrome instance.\n */\nasync function launchChrome(options: CreateOptions): Promise<LaunchedChrome> {\n  const chrome = await launch({\n    port: options.port,\n    chromePath: options.chromePath,\n    chromeFlags: options.chromeFlags || DEFAULT_CHROME_FLAGS,\n  });\n  options.port = chrome.port;\n  return chrome;\n}\n"],"sourceRoot":"../.."}