{"version":3,"sources":["src/CompletionTriggers/Element.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;AAEb,2DAAwD;AAExD;;;;;;GAMG;AACH,MAAa,OAAQ,SAAQ,qCAAiB;IAE5C;;;;;OAKG;IACH,YAAsB,WAAmB,EAAE,OAAgB;QACzD,KAAK,CAAC,OAAO,CAAC,CAAC;QADK,gBAAW,GAAX,WAAW,CAAQ;IAEzC,CAAC;IAEY,IAAI,CAAC,MAAW;;YAC3B,MAAM,EAAC,OAAO,EAAC,GAAG,MAAM,CAAC;YACzB,OAAO,OAAO,CAAC,QAAQ,CAAC;gBACtB,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE;;;;0EAIwD,IAAI,CAAC,WAAW;;;;;;qCAMrD,IAAI,CAAC,cAAc,OAAO,IAAI,CAAC,OAAO;WAChE;aACN,CAAC,CAAC;QACL,CAAC;KAAA;CAEF;AA/BD,0BA+BC","file":"Element.js","sourcesContent":["'use strict';\n\nimport { CompletionTrigger } from './CompletionTrigger';\n\n/**\n * Waits for a DOM element to appear.\n *\n * @export\n * @class Element\n * @extends {CompletionTrigger}\n */\nexport class Element extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Element CompletionTrigger.\n   * @param {string} cssSelector the element to listen for.\n   * @param {number} [timeout] ms to wait until timing out.\n   * @memberof Element\n   */\n  constructor(protected cssSelector: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise((resolve, reject) => {\n          new MutationObserver((mutations, observer) => {\n            mutations.forEach((mutation) => {\n              if ([...mutation.addedNodes].find((node) => node.matches('${this.cssSelector}'))) {\n                observer.disconnect();\n                resolve();\n              }\n            });\n          }).observe(document.body, { childList: true });\n          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});\n        })`,\n    });\n  }\n\n}\n"],"sourceRoot":"../../.."}