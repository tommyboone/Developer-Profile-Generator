{"version":3,"sources":["src/CompletionTriggers/Event.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;AAEb,2DAAwD;AAExD;;;;;;GAMG;AACH,MAAa,KAAM,SAAQ,qCAAiB;IAE1C;;;;;;;OAOG;IACH,YAAsB,KAAa,EAAY,WAAoB,EAAE,OAAgB;QACnF,KAAK,CAAC,OAAO,CAAC,CAAC;QADK,UAAK,GAAL,KAAK,CAAQ;QAAY,gBAAW,GAAX,WAAW,CAAS;IAEnE,CAAC;IAEY,IAAI,CAAC,MAAW;;YAC3B,MAAM,EAAC,OAAO,EAAC,GAAG,MAAM,CAAC;YACzB,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,kBAAkB,IAAI,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;YACpF,OAAO,OAAO,CAAC,QAAQ,CAAC;gBACtB,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE;;qBAEG,QAAQ,sBAAsB,IAAI,CAAC,KAAK;qCACxB,IAAI,CAAC,cAAc,OAAO,IAAI,CAAC,OAAO;WAChE;aACN,CAAC,CAAC;QACL,CAAC;KAAA;CAEF;AA3BD,sBA2BC","file":"Event.js","sourcesContent":["'use strict';\n\nimport { CompletionTrigger } from './CompletionTrigger';\n\n/**\n * Waits for an Event to fire.\n *\n * @export\n * @class Event\n * @extends {CompletionTrigger}\n */\nexport class Event extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Event CompletionTrigger.\n   * @param {string} event the name of the event to listen for.\n   * @param {string} [cssSelector] the CSS selector of the element to listen on.\n   *  Defaults to body.\n   * @param {number} [timeout] ms to wait until timing out.\n   * @memberof Event\n   */\n  constructor(protected event: string, protected cssSelector?: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    const selector = this.cssSelector ? `querySelector('${this.cssSelector}')` : 'body';\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise((resolve, reject) => {\n          document.${selector}.addEventListener('${this.event}', resolve, { once: true });\n          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});\n        })`,\n    });\n  }\n\n}\n"],"sourceRoot":"../../.."}