{"version":3,"sources":["src/CompletionTriggers/Callback.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD;;;;;;GAMG;AACH,qBAAa,QAAS,SAAQ,iBAAiB;IASjC,SAAS,CAAC,YAAY,CAAC,EAAE,MAAM;IAP3C;;;;;;OAMG;gBACmB,YAAY,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,MAAM;IAIhD,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;CAa7C","file":"Callback.d.ts","sourcesContent":["'use strict';\n\nimport { CompletionTrigger } from './CompletionTrigger';\n\n/**\n * Waits for a callback to be called.\n *\n * @export\n * @class Callback\n * @extends {CompletionTrigger}\n */\nexport class Callback extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Callback CompletionTrigger.\n   * @param {string} [callbackName] the name of the callback to listen for.\n   *  Defaults to htmlPdfCb.\n   * @param {number} [timeout] ms to wait until timing out.\n   * @memberof Callback\n   */\n  constructor(protected callbackName?: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    const cbName = this.callbackName || 'htmlPdfCb';\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise((resolve, reject) => {\n          ${cbName} = resolve;\n          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});\n        })`,\n    });\n  }\n\n}\n"],"sourceRoot":"../../.."}